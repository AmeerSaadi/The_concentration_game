#define pinLedRed 11
#define pinLedGreen 9
#define pinLedBlue 6
#define pinLedYellow 10

#define pinBtnRed 12
#define pinBtnGreen 4
#define pinBtnBlue 3
#define pinBtnYellow 2

#define pinBuzzer 5

int ledPins[] = {pinLedRed, pinLedGreen, pinLedBlue, pinLedYellow};
int btnPins[] = {pinBtnRed, pinBtnGreen, pinBtnBlue, pinBtnYellow};
bool ledState[4] = {false, false, false, false};

unsigned long startTime;
unsigned long firstPressTime;
unsigned long lastReleaseTime;

bool gameActive = false;
bool waitingForInput = false;
bool pressed[4] = {false, false, false, false};  

void setup() {
  for (int i = 0; i < 4; i++) {
    pinMode(ledPins[i], OUTPUT);
    pinMode(btnPins[i], INPUT_PULLUP);
  }
  pinMode(pinBuzzer, OUTPUT);

  Serial.begin(9600);
}

void loop() {
  if (!gameActive) {
    startGame();
  } else if (waitingForInput) {
    checkPlayerInput();
  }
}

void startGame() {
  resetGame();

  for (int i = 0; i < 3; i++) {
    int randIndex = random(0, 4);
    while (ledState[randIndex]) {
      randIndex = random(0, 4);
    }
    digitalWrite(ledPins[randIndex], HIGH);
    ledState[randIndex] = true;
  }
  delay(1000);

  for (int i = 0; i < 4; i++) {
    digitalWrite(ledPins[i], LOW);
  }
  delay(1000);
  beep();

  waitingForInput = true;
  firstPressTime = 0;
}

void checkPlayerInput() {
  int correctPresses = 0;
  unsigned long pressDuration;

  for (int i = 0; i < 4; i++) {
    int btnState = digitalRead(btnPins[i]);

    if (btnState == LOW && !pressed[i]) {
      pressed[i] = true;

      if (firstPressTime == 0) {
        firstPressTime = millis();
      }

      if (!ledState[i]) {
        digitalWrite(pinLedRed, HIGH); 
        fail();
        return;
      } else {
        digitalWrite(pinLedGreen, HIGH);  
        delay(500);
        digitalWrite(pinLedGreen, LOW);
        correctPresses++;
      }
    }

    if (btnState == HIGH && pressed[i] && ledState[i]) {
      lastReleaseTime = millis();
    }
  }

  if (correctPresses == 3) {
    pressDuration = lastReleaseTime - firstPressTime;
    if (pressDuration < 1000) {
      success();
    } else {
      fail();
    }
    waitingForInput = false;
    gameActive = false;
  }
}
